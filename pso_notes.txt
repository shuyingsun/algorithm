###########################################################################
###########################################################################
clusmgr_main.c
###########################################################################
###########################################################################
static clusmgr_driver_t *gl_drivers[]
cluster manager????,????corosync
###########################################################################
static clusmgr_driver_t* cs_find_ops(const char *name)
?gl_drivers[]?????name?cluster manager
###########################################################################
static void clusmgr_start_services(clusmgr_t *cm)
?commonlib??(clusmgr_t)g_clusmgr->cl_hdl,??g_clusmgr->cl_svc_hdl
###########################################################################
void clusmgr_core_start_services(clusmgr_t *cm)
?commonlib??(clusmgr_t)g_clusmgr->cl_hdl,??g_clusmgr->cl_svc_hdl_remote
###########################################################################
static void* clusmgr_mon_thr(void *arg)
# ??(clusmgr_t)g_clusmgr->op->check_service
?error, ???: stop_service, start_service
# ?STANDALONE,????(clusmgr_t)g_clusmgr->op->check_misc
###########################################################################
5/12:
338 retry_standalone_mode
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
clusmgr_core_corosync.c
###########################################################################
###########################################################################
static int corosync_init(clusmgr_t *cm)
# ???(clusmgr_t)g_clusmgr->driver_data (clusmgr_corosync_sys_t *)
# ???driver_data???:
g_clusmgr->driver_data->evt_internal_queue.q_mtx
g_clusmgr->driver_data->evt_public_queue.q_mtx
g_clusmgr->driver_data->corosync_event_mtx
g_clusmgr->driver_data->corosync_config_mtx
###########################################################################
static int corosync_check_process(clusmgr_t *cm)
??(clusmgr_t)g_clusmgr->driver_data->corosync_pid
??(clusmgr_t)g_clusmgr->driver_data->corosync_reboot_needed
###########################################################################
static void corosync_check_misc(clusmgr_t *cm)
placeholder
###########################################################################
static void corosync_stop_process(clusmgr_t *cm)
kill -SIGTERM (clusmgr_t)g_clusmgr->driver_data->corosync_pid??pid?0
###########################################################################
static int corosync_start_process(clusmgr_t *cm)
# ???????:
corosync_bin_path[]  = /sbin/corosync ? /ddr/bin/corosync
corosync_auth_path[] = /etc/corosync/corosync.conf ? /ddr/var/corosync/etc/corosync/corosync.conf
corosync_conf_path[] = /etc/corosync/authkey ? /ddr/var/corosync/etc/corosync/authkey
corosync_pid_path[]  = /var/run/corosync.pid ? /ddr/var/corosync/var/run/corosync.pid
# step1. write the configuration
# step2. write the authenticated key
# step3. start the process
fork(),?????(clusmgr_t)g_clusmgr->driver_data->corosync_pid
###########################################################################
static int corosync_gen_conf(clusmgr_t *cm)
?(clusmgr_t)g_clusmgr->driver_data->corosync_config??corosync_conf_path:
???totem??
###########################################################################
static int corosync_write_authkey(clusmgr_t *cm)
?driver_data->corosync_config.u.s01.authkey??corosync_auth_path
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
clusmgr_utils.c
###########################################################################
###########################################################################
int clusmgr_find_process(const char * name)
?/proc???name???(corosync),?????pid
###########################################################################
int clusmgr_check_process(int pid, const char *name)
??/proc/process_pid/stat,??error_number?no_error
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################
###########################################################################